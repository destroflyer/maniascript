{
    "fileTypes": [
        "Script.txt"
    ],
    "firstLineMatch": "#RequireContext",
    "keyEquivalent": "^~M",
    "name": "maniascript",
    "scopeName": "source.ms",
    "patterns": [
        {
            "include": "#core"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*\\*(?!/)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.ms"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.documentation.ms"
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.ms"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.ms"
                        }
                    },
                    "match": "(//).*$\\n?",
                    "name": "comment.line.double-slash.ms"
                }
            ]
        },
        "brackets": {
            "patterns": [
                {
                    "include": "#round-brackets"
                },
                {
                    "include": "#square-brackets"
                },
                {
                    "include": "#curly-brackets"
                }
            ]
        },
        "round-brackets": {
            "patterns": [
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.brace.round.ms"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.ms"
                        }
                    },
                    "name": "meta.group.braces.round",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "square-brackets": {
            "patterns": [
                {
                    "begin": "\\[",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.brace.square.ms"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.square.ms"
                        }
                    },
                    "name": "meta.group.braces.square",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "curly-brackets": {
            "patterns": [
                {
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.brace.curly.ms"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.curly.ms"
                        }
                    },
                    "name": "meta.group.braces.curly",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },
        "core": {
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "keyword-language": {
            "patterns": [
                {
                    "comment": "Common control keywords found in various imperitive C style languages",
                    "match": "\\b(assert|foreach|break|case|continue|log|do|else|finally|for|yield|if|return|switch|switchtype|while)\\b",
                    "name": "keyword.language.control.flow.ms"
                },
                {
                    "comment": "Unique keywords, things very specific to mania",
                    "match": "#\\b(Command|Include|RequireContext|Setting|Const|Extends|Struct)\\b",
                    "name": "keyword.language.control.ms"
                }
            ]
        },
        "storage-types": {
            "patterns": [
                {
                    "match": "(?<!\\.)\\bText\\b",
                    "name": "storage.type.text.ms"
                },
                {
                    "match": "(?<!\\.)\\bReal\\b",
                    "name": "storage.type.number.ms"
                },
                {
                    "match": "(?<!\\.)\\bIdent\\b",
                    "name": "storage.type.identity.ms"
                },
                {
                    "match": "(?<!\\.)\\bBoolean\\b",
                    "name": "storage.type.boolean.ms"
                },
                {
                    "match": "(?<!\\.)\\bInteger\\b",
                    "name": "storage.type.integer.ms"
                },
                {
                    "match": "(?<!\\.)\\bVec2\\b",
                    "name": "storage.type.vector-tuple.ms"
                },
                {
                    "match": "(?<!\\.)\\bVec3\\b",
                    "name": "storage.type.vector-triple.ms"
                },
                {
                    "match": "(?<!\\.)\\bInt3\\b",
                    "name": "storage.type.integer-triple.ms"
                }
            ]
        },
        "keyword-storage": {
            "patterns": [
                {
                    "match": "#\\b(Command|Include|RequireContext|Setting|Const|Extends|Struct)\\b",
                    "name": "keyword.language.ms"
                },
                {
                    "match": "(?<!\\.)\\b(persistent|netread|netwrite|define|declare)\\b",
                    "name": "storage.type.ms"
                },
                {
                    "match": "\\bUI[a-zA-Z]*?\\b",
                    "name": "storage.type.ui.ms"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": "\\;",
                    "name": "punctuation.terminator.statement.ms"
                },
                {
                    "match": ",",
                    "name": "meta.delimiter.comma.ms"
                }
            ]
        },
        "language-constant": {
            "patterns": [
                {
                    "match": "(?<!\\.)\\bTrue\\b",
                    "name": "constant.language.boolean.true.ms"
                },
                {
                    "match": "(?<!\\.)\\bFalse\\b",
                    "name": "constant.language.boolean.false.ms"
                },
                {
                    "match": "(?<!\\.)\\bNull\\b",
                    "name": "constant.language.Null.ms"
                },
                {
                    "match": "(?<!\\.)\\bNullId\\b",
                    "name": "constant.language.NullId.ms"
                },
                {
                    "comment": "Match numbers",
                    "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
                    "name": "constant.numeric.ms"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "match": "\\b(CAchievementsAchievement|CAchievementsAchievementDesc|CAchievementsEvent|CAchievementsManager|CAchievementsStat|CAchievementsStatDesc|CAction|CActionInterface|CActionManager|CAnchorData|CAnimManager|CAnyEditorPlugin|CAudioManager|CAudioSource|CAudioSourceMusic|CBadge|CBadgeEditor|CBadgeManager|CBaseConstEvent|CBaseEvent|CBlock|CBlockClip|CBlockClipList|CBlockModel|CBlockModelClip|CBlockModelVariant|CBlockModelVariantAir|CBlockModelVariantGround|CBlockUnit|CBlockUnitModel|CCampaign|CClient|CCollector|CDataFileMgr|CEditorAsset|CEditorBase|CEditorEditor|CEditorEvent|CEditorMainPlugin|CEditorMesh|CEditorModule|CEditorPluginHandle|CEditorPluginModuleEvent|CEntity|CGhost|CHighScoreComparison|CHighScoreComparisonSummary|CHttpEvent|CHttpManager|CHttpRequest|CImage|CInputEvent|CInputManager|CInputPad|CItemAnchor|CMacroblockInstance|CMacroblockModel|CManiaApp|CManiaAppBase|CManiaAppBrowser|CManiaAppEvent|CManiaAppPlayground|CManiaAppPlaygroundCommon|CManiaAppPlaygroundEvent|CManiaAppStation|CManiaAppTitle|CManiaAppTitleLayer|CMap|CMapBotPath|CMapBotSpawn|CMapEditorPlugin|CMapEditorPluginEvent|CMapEditorPluginLayer|CMapGroup|CMapInfo|CMapLandmark|CMapObjectAnchor|CMapSector|CMapSpawn|CMapType|CMapWaypoint|CMatchSettings|CMatchSettingsManager|CMatchSettingsPlaylistItem|CMlBrowser|CMlCamera|CMlControl|CMlEntry|CMlFileEntry|CMlFrame|CMlGauge|CMlGraph|CMlGraphCurve|CMlLabel|CMlMediaPlayer|CMlMinimap|CMlPage|CMlQuad|CMlScript|CMlScriptEvent|CMlScriptIngame|CMlStation|CMlTextEdit|CMode|CModeTurret|CModeTurretManager|CModeVehicle|CModeVehicleManager|CModuleMenu|CModuleMenuComponent|CModuleMenuFileBrowser|CModuleMenuLayer|CModuleMenuModel|CModuleMenuPageModel|CModulePlayground|CModulePlaygroundChrono|CModulePlaygroundHud|CModulePlaygroundHudModel|CModulePlaygroundInventory|CModulePlaygroundPlayerState|CModulePlaygroundScoresTable|CModulePlaygroundSpeedMeter|CModulePlaygroundStore|CModulePlaygroundTeamState|CNaturalLeaderBoardInfo|CNod|CNotificationsConsumer|CNotificationsConsumerEvent|CNotificationsConsumerNotification|CPackCreator|CPackCreatorPack|CPackCreatorRecipient|CPackCreatorTitleInfo|CParsingDocument|CParsingManager|CParsingNode|CPlayer|CPlaygroundClient|CPlug|CRealLeaderBoardInfo|CReplayInfo|CScore|CScoreMgr|CServerAdmin|CServerInfo|CServerPlugin|CServerPluginEvent|CSmAction|CSmActionEvent|CSmBase|CSmBlock|CSmBlockPole|CSmGauge|CSmLandmark|CSmMapBase|CSmMapGate|CSmMapGauge|CSmMapLandmark|CSmMapType|CSmMlScriptIngame|CSmMode|CSmModeEvent|CSmObject|CSmPlayer|CSmPlayerDriver|CSmScore|CSmSector|CStation|CSystemPlatform|CTaskResult|CTaskResult_BuddiesChallengeRecord|CTaskResult_BuddiesChallengeRecordsComparison|CTaskResult_BuddyChallengeRecordsComparison|CTaskResult_FileList|CTaskResult_GameModeList|CTaskResult_Ghost|CTaskResult_GhostList|CTaskResult_MapList|CTaskResult_MapRecord|CTaskResult_MapRecordList|CTaskResult_ModeInfo|CTaskResult_NaturalLeaderBoardInfoList|CTaskResult_PlayerMapRecords|CTaskResult_RealLeaderBoardInfoList|CTaskResult_ReplayList|CTaskResult_StringIntList|CTeam|CTitle|CTitleControl|CTitleEdition|CTmMapType|CTmMlPlayer|CTmMlScriptIngame|CTmMode|CTmModeEvent|CTmPlayer|CTmRaceClientEvent|CTmResult|CTmScore|CTrackManiaScore|CUIConfig|CUIConfigEvent|CUIConfigMgr|CUILayer|CUser|CUserV2Manager|CUserV2Profile|CVehicleSettings|CVideo|CVideoManager|CXmlRpc|CXmlRpcEvent|CIdent|CInt3|CInteger|CReal|CSHudModule|CText|CVec2|CVec3|CVoid|This)\\b",
                    "name": "support.class.builtin.ms"
                },
                {
                    "match": "\\b(Page|PageIsVisible|Now|Period|CurrentTime|CurrentTimeText|CurrentLocalDateText|LocalUser|LoadedTitle|MouseX|MouseY|MouseLeftButton|MouseRightButton|MouseMiddleButton|KeyUp|KeyDown|KeyLeft|KeyRight|KeyReturn|KeySpace|KeyDelete|EnableMenuNavigationInputs|IsMenuNavigationForeground|Xml|Http|Audio|Value|MaxLine|AutoNewLine|FullFileName|Style|Substyle|TextFont|Value|ValueLineCount|MaxLine|AppendEllipsis|AutoNewLine|Opacity|TextColor|TextSize|ImageUrl|ImageUrlFocus|Style|Substyle|StyleSelected|DownloadInProgress|Colorize|ModulateColor|BgColor|BgColorFocus|Opacity|KeepRatio|Style|Ratio|GradingRatio|Clan|Color|DrawBackground|DrawBlockBackground|CenteredBar|CoordsMin|CoordsMax|WorldPosition|MapPosition|MapYaw|ZoomFactor|CurMap|BuddyDoResult|BuddyDoErrorMessage|IsInBrowser|BrowserFocusedFrameId|Now|IsVisible|LocalUser|LoadedTitle|EnableMenuNavigationInputs|MouseX|MouseY|Xml|Http|Audio|Type|CustomEventLayer|CustomEventType|ExternalEventType|MenuNavAction|KeyCode|KeyName|LoadingScreenRequireKeyPressed|DontScaleMainMenuForHMD|Title|AudienceRegisteredUsers|CampaignMedalsMax|CampaignMedalsCurrent|CampaignMedalsRanking|LadderPoints|LadderRank|Station|Map|PlaceMode|EditMode|UndergroundMode|BlockStockMode|CursorCoord|CursorDir|CursorBlockModel|CursorTerrainBlockModel|CursorMacroblockModel|CameraVAngle|CameraHAngle|CameraToTargetDistance|TargetedPosition|EnableAirMapping|EnableMixMapping|MediatrackIngameEditedClipIndex|CustomSelectionRGB|EnableEditorInputsCustomProcessing|EditorInputIsDown_Menu|EditorInputIsDown_SwitchToRace|EditorInputIsDown_CursorUp|EditorInputIsDown_CursorRight|EditorInputIsDown_CursorDown|EditorInputIsDown_CursorLeft|EditorInputIsDown_CursorRaise|EditorInputIsDown_CursorLower|EditorInputIsDown_CursorTurn|EditorInputIsDown_CursorPick|EditorInputIsDown_CursorPlace|EditorInputIsDown_CursorDelete|EditorInputIsDown_CameraUp|EditorInputIsDown_CameraRight|EditorInputIsDown_CameraDown|EditorInputIsDown_CameraLeft|EditorInputIsDown_IconUp|EditorInputIsDown_IconRight|EditorInputIsDown_IconDown|EditorInputIsDown_IconLeft|CollectionSquareSize|CollectionSquareHeight|CollectionGroundY|ManialinkText|ManialinkPage|StartTime|EndTime|SpawnInvulnerabilityDuration|UseClans|UseForcedClans|UsePvPCollisions|UsePvPWeapons|UseInterractiveScreensIn3d|UseLaserVsBullets|UseLaserSkewering|UsePlayerTagging|UseBeaconsWithRecipients|UseAmmoBonusOnHit|UseSameWallJump|UseDefaultActionEvents|UseAllies|UseAutoSpawnBots|ForceNavMapsComputation|GameplayVersion|Gameplay|UseProtectClanmates|OffZoneRadius|OffZoneRadiusSpeed|OffZoneCenterLandmarkId|PlayersNbTotal|PlayersNbAlive|PlayersNbDead|ClansNbTotal|ClansNbAlive|ClansNbDead|ArenaNow|InputPlayer|GUIPlayer|HideResumePlayingButton|Now|Variant|Owner|IsActive|Energy|EnergyMax|EnergyCost|EnergyReload|InitialDirection,Vec3|Cooldown|Mode|InputPlayer|GUIPlayer|MapStartLinePos|MapIsLapRace|MapNbLaps|Clan1Score|Clan2Score|ClansNbTotal|CutOffTimeLimit|NbLaps|IndependantLaps|UseClans|UseForcedClans|RespawnBehaviour|UiRounds|UiLaps|UiStuntsMode|UiDisplayStuntsNames|UiDisableHelpMessage|UiScoresPointsLimit|UiRaceChrono|HideOpponents|ForceMaxOpponents|EnableLegacyXmlRpCallbacks|MedalGhost_ShowGold|MedalGhost_ShowSilver|MedalGhost_ShowBronze|PersonalGhost|MapStartLinePos|MapIsLapRace|MapNbLaps|Mode|Id|MainFrame|LinksInhibited|Login|Name|AvatarUrl|ZonePath|ZoneFlagUrl|CountryFlagUrl|Language|Description|Color|ClubLink|BroadcastTVLogin|SteamUserId|FameStars|Echelon|IsBeginner|LadderRank|LadderTotal|LadderPoints|LadderZoneName|LadderZoneFlagUrl|RequestedClan|RequestsSpectate|IsFakeUser|StereoDisplayMode|TitleId|BaseTitleId|Name|Desc|InfoUrl|DownloadUrl|TitleVersion|Type|KeyCode|KeyName|CharPressed|ControlId|Control|MenuNavAction|CustomEventType|SlotsAvailable|ForceEnableMusic|LimitMusicVolumedB|ControlId|Size|HorizontalAlign|VerticalAlign|Visible|RelativePosition|RelativeScale|RelativeRotation|AbsolutePosition|AbsoluteScale|AbsoluteRotation|Color|Style|Width|MapInfo|MapName|Comments|AuthorZoneIconUrl|CollectionName|DecorationName|AuthorLogin|AuthorNickName|AuthorZonePath|MapType|MapStyle|TMObjective_AuthorTime|TMObjective_GoldTime|TMObjective_SilverTime|TMObjective_BronzeTime|TMObjective_NbLaps|TMObjective_IsLapRace|ObjectiveTextAuthor|ObjectiveTextGold|ObjectiveTextSilver|ObjectiveTextBronze|CopperPrice|Size|IsVisible|Type|AttachId|ManialinkPage|LocalPage|Type|Input|EditedAnchorDataId|Name|IsRoad|IsTerrain|WaypointType|NoRespawn|VariantGround|VariantAir|IsGround|HasStart|HasFinish|HasCheckpoint|GeneratedBlockModel|Name|Position|BlockScriptId|CanHaveAnchor|Coord|Direction|BlockModel|DefaultTag|DefaultOrder|Tag|Order|ModeStatusMessage|LoadedTitle|ServerLogin|ServerName|ServerModeName|MapName|Map|MapPlayerModelName|NeutralEmblemUrl|ForcedClubLinkUrl1|ForcedClubLinkUrl2|Now|Period|MatchEndRequested|ServerShutdownRequested|MapLoaded|NextMapIndex|UIManager|Ladder_RequestInProgress|Solo_NewRecordSequenceInProgress|XmlRpc|Xml|Http|UseMinimap|Replay_AutoStart|Score|SpawnStatus|StartTime|EndTime|AmmoGain|AmmoPower|AutoSwitchWeapon|CurWeapon|CurAmmo|CurAmmoMax|CurAmmoUnit|Armor|ArmorMax|ArmorGain|ArmorReplenishGain|ArmorPower|Stamina|StaminaMax|StaminaGain|StaminaPower|SpeedPower|JumpPower|AllowWallJump|AllowProgressiveJump|UseAlternateWeaponVisual|IsHighlighted|EnergyLevel|ForceColor|ForceModelId|HasShield|ThrowSpeed|CurrentClan|IdleDuration|Position|AimYaw|AimPitch|AimDirection|IsUnderground|IsTouchingGround|IsInAir|IsOnTechGround|IsOnTechLaser|IsOnTechArrow|IsOnTechArmor|IsOnTechSafeZone|IsOnTech|IsOnTechNoWeapon|IsInWater|Velocity|Speed|IsInOffZone|IsCapturing|CapturedLandmark|IsFakePlayer|IsBot|Driver|Type|Player|Damage|VictimObject|ShooterPoints|Shooter|Victim|Height|MissDist|WeaponNum|ShooterUsedAction|ShooterWeaponNum|ShooterActionSlot|ShooterActionId|VictimUsedAction|VictimWeaponNum|VictimActionSlot|VictimActionId|Action_Slot|ActionInput|ActionId|Param1|Object|BlockPole|Landmark|PlayerId|User|PlayerWasSpawned|PlayerWasInLadderMatch|PlayerLastPosition|PlayerLastAimDirection|GiveUp|CommandName|CommandValueBoolean|CommandValueInteger|CommandValueReal|CommandValueText|ActionChange|Clan|IsActive|NumberOfCollectors|Tag|Order|Position|Base|Gate|Gauge|Sector|PlayerSpawn|BotPath|ObjectAnchor|TeamNum|Points|RoundPoints|NbEliminationsInflicted|NbEliminationsTaken|NbRespawnsRequested|DamageInflicted|DamageTaken|Status|ModelId|Player|Position|Vel|MachineState|Throwable|GameTime|UI|ClientUI|IsSpectatorMode|UseClans|UseForcedClans|Map|CurrentServerLogin|CurrentServerName|CurrentServerJoinLink|CurrentServerModeName|Type|Player|Damage|ProjectileModelId|ContextId|Position|Direction|Normal|CustomEditAnchorData|ValidationStatus|ValidabilityRequirementsMessage|ValidationEndRequested|IsSwitchedToPlayground|CurrentClan|RaceState|IsSpawned|Score|RaceStartTime|LapStartTime|CurRace|CurLap|CurrentNbLaps|CurTriggerIndex|CurCheckpointRaceTime|CurCheckpointLapTime|ACelCoef|ControlCoef|Position|AimYaw|AimPitch|AimDirection|Distance|Speed|DisplaySpeed|TeamNum|Points|BestRace|BestLap|PrevRaceDeltaPoints|PrevRace|TempResult|CurrentClan|Score|RaceStartTime|IsSpawned|CurRace|CurLap|CurrentNbLaps|CurTriggerIndex|Position|AimYaw|AimPitch|AimDirection|ACelCoef|ControlCoef|Type|Player|RaceTime|CheckpointInRace|CheckpointInLap|IsEndLap|IsEndRace|LapTime|StuntsScore|NbRespawns|BlockId|Speed|Distance|Damages|StuntFigure|Angle|Points|Combo|IsStraight|IsReverse|IsMasterJump|Factor|User|PlayerWasSpawned|PlayerWasInLadderMatch|ClipWindowActive|ClipWindowRelativePosition|ClipWindowSize|TextContents|Root|Url|Result|StatusCode|IsCompleted|IsPlaying|DownloadInProgress|Volume|VolumedB|Pitch|RelativePosition|PlayCursor|PlayLength|Comments|CopperPrice|CollectionName|AuthorLogin|AuthorNickName|AuthorZonePath|MapType|MapStyle|Unlocked|Name|Path|Name|PageName|Offset|BlockUnitModel|Block|Name|ZonePath|City|EmblemUrl|PresentationManialinkUrl|ClubLinkUrl|ColorPrimary|ColorSecondary|ColorText|ColorizedName|UIAll|UISequenceMaxDuration|User|Login|Name|RequestedClan|RequestsSpectate|Behaviour|AggroRadius|DisengageDistance|PathSpeedCoef|ACuracy|ReactionTime|ShootPeriodMin|ShootPeriodMax|RocketAnticipation|Fov|AttackFilter|Target|IsStuck|IsFlying|PathOffset|Agressivity|UseOldShootingSystem|Patrol_Mode|Escape_AnchorPoint|Escape_DistanceSafe|Escape_DistanceMinEscape|Escape_DistanceMaxEscape|Saunter_AnchorPoint|Saunter_BaseChillingTime|Saunter_ChillingTimeDelta|Saunter_Radius|Scripted_ForceAimInMoveDir|ForcedTarget|Captured|Sector|Gauge|Clan|Automatic|ManualClosed|AutoClosed|AutoIsActive|AutoCloseDelay|AutoOpenSpeed|Clan|ValueReal|Value|Max|Speed|Captured|Clan|IsFlying|ItemName|ItemModelId|User|IsRegisteredForLadderMatch|LadderScore|LadderRankSortValue|LadderMatchScoreValue|LadderClan|UISequence|UISequenceIsCompleted|UISequence_CustomMTClip|UISequence_CustomMTRefTime|UISequence_CanSkipIntroMT|UISequence_PodiumPlayersWin|UISequence_PodiumPlayersLose|ManialinkPage|BigMessage|BigMessageAvatarLogin|BigMessageAvatarVariant|BigMessageSound|BigMessageSoundVariant|StatusMessage|GaugeMessage|GaugeRatio|GaugeClan|MarkersXML|OverlayHideNotices|OverlayHideMapInfo|OverlayHideOpponentsInfo|OverlayHideChat|OverlayHideCheckPointList|OverlayHideRoundScores|OverlayHideCountdown|OverlayHideCrosshair|OverlayHideGauges|OverlayHideConsumables|OverlayHide321Go|OverlayHideBackground|OverlayHideChrono|OverlayHideSpeedAndDist|OverlayHidePersonnalBestAndRank|OverlayHidePosition|OverlayHideCheckPointTime|OverlayHideEndMapLadderRecap|OverlayHideMultilapInfos|OverlayHideSpectatorControllers|OverlayHideSpectatorInfos|OverlayChatHideAvatar|OverlayChatLineCount|OverlayChatOffset|CountdownCoord|NoticesFilter_HidePlayerInfo|NoticesFilter_HidePlayerWarning|NoticesFilter_HidePlayerInfoIfNotMe|NoticesFilter_HidePlayerWarningIfNotMe|NoticesFilter_HideMapInfo|NoticesFilter_HideMapWarning|NoticesFilter_HideMatchInfo|NoticesFilter_HideMatchWarning|NoticesFilter_LevelToShowAsBigMessage|ScoreTable|ScoreTableVisibility|SmallScoreTable|SmallScoreTableVisibility|ScoreTableOnlyManialink|AltMenuNoDefaultScores|AltMenuNoCustomScores|OverlayScoreSummary|ScoreSummary_Player1|ScoreSummary_Points1|ScoreSummary_RoundPoints1|ScoreSummary_MatchPoints1|ScoreSummary_Gauge1|ScoreSummary_Player2|ScoreSummary_Points2|ScoreSummary_RoundPoints2|ScoreSummary_MatchPoints2|ScoreSummary_Gauge2|ScreenIn3dHideScoreSummary|ScreenIn3dHideVersus|CountdownEndTime|UIStatus|AlliesLabelsVisibility|AlliesLabelsShowGauges|AlliesLabelsShowNames|AlliesLabelsMaxCount|TeamLabelsVisibility|TeamLabelsShowGauges|TeamLabelsShowNames|OpposingTeamLabelsVisibility|OpposingTeamLabelsShowGauges|OpposingTeamLabelsShowNames|ForceSpectator|SpectatorForceCameraType|SpectatorAutoTarget|SpectatorForcedTarget|SpectatorForcedClan|SpectatorCamAutoLatitude|SpectatorCamAutoLongitude|SpectatorCamAutoRadius|SpectatorObserverMode|Time|StuntsScore|NbRespawns|Name|TextContents|TextRawContents|TextRecursiveContents|Name|IsAllUnderground|IsPartUnderground|Size|OffsetBoundingBoxMin|OffsetBoundingBoxMax|Offset|Type|Param1|Param2|ParamArray1|Base|Clan|ValueReal|Value|Max|Speed|Tag|Order|Position|DirFront|Clan|IsActive|NumberOfCollectors)\\b",
                    "name": "support.constant.builtin.ms"
                },
                {
                    "match": "(?<!\\.)\\b(count|containsonly|containsoneof|slice|exists|existskey|remove|removekey|add|addfirst|sort|sortreverse|sortkey|sortkeyreverse|keyof|tojson|fromjson)\\b",
                    "name": "support.function.ms"
                }
            ]
        },
        "literal-template-string": {
            "patterns": [
                {
                    "begin": "([a-zA-Z$_][\\w$_]*)?(\"\"\")",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.template-string.tag.name.ms"
                        },
                        "2": {
                            "name": "punctuation.definition.template-string.begin.ms"
                        }
                    },
                    "end": "\"\"\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-string.end.ms"
                        }
                    },
                    "name": "string.template-string.ms",
                    "patterns": [
                        {
                            "include": "#template-string-content"
                        },
                        {
                            "include": "text.xml"
                        },
                        {
                            "begin": "{{{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.template-string.element.begin.ms"
                                }
                            },
                            "end": "}}}",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.template-string.element.end.ms"
                                }
                            },
                            "name": "entity.template-string.element.ms",
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "(?<!\\.)\\b(in|as|for)\\b",
                    "name": "keyword.operator.ms"
                },
                {
                    "match": "!(?!=)|&&|\\|\\|",
                    "name": "keyword.operator.logical.ms"
                },
                {
                    "match": "=(?!=)",
                    "name": "keyword.operator.assignment.ms"
                },
                {
                    "match": "%=|&=|\\*=|\\+=|-=|/=|\\^|\\^=|\\|=|<<=|>>=|>>>=",
                    "name": "keyword.operator.assignment.augmented.ms"
                },
                {
                    "match": "<=|>=|<|>",
                    "name": "keyword.operator.relational.ms"
                },
                {
                    "match": "==|!=",
                    "name": "keyword.operator.comparison.ms"
                },
                {
                    "match": "/|%{1}|(?<!\\*)\\*{1}(?!\\*)|(?<!\\+)\\+{1}(?!\\+)|(?<!-)-{1}(?!-)",
                    "name": "keyword.operator.arithmetic.ms"
                },
                {
                    "match": "::",
                    "name": "keyword.operator.accessor.method.ms"
                },
                {
                    "match": ".\\|",
                    "name": "keyword.operator.accessor.property.ms"
                }
            ]
        },
        "template-string-content": {
            "patterns": [
                {
                    "begin": "{{{",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.flow.expression.ms"
                        }
                    },
                    "end": "}}}",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.flow.expression.ms"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.embedded.script.block.ms",
                    "begin": "(<script><!--|<script><\\!\\[CDATA\\[|<script>)",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.brace.tag.script.open.ms"
                        },
                        "1": {
                            "name": "punctuation.tag.script.open.ms"
                        }
                    },
                    "end": "(--><\\/script>|\\]\\]<\\/script>|<\\/script>)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.tag.script.close.ms"
                        },
                        "1": {
                            "name": "punctuation.tag.script.close.ms"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },
        "literal-string": {
            "patterns": [
                {
                    "begin": "(?<!\")\"{1}(?!\"\")",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.ms"
                        }
                    },
                    "end": "(\"{1})|([\\n])",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.ms"
                        },
                        "2": {
                            "name": "punctuation.definition.string.end.illegal.ms"
                        }
                    },
                    "name": "string.quoted.ms",
                    "patterns": [
                        {
                            "include": "#string-content"
                        }
                    ]
                }
            ]
        },
        "literal-switch": {
            "patterns": [
                {
                    "begin": "(?<!\\.)\\b(switch|switchtype)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.switch.ms"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.curly.ms"
                        }
                    },
                    "name": "meta.switch.ms",
                    "patterns": [
                        {
                            "include": "#round-brackets"
                        },
                        {
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.brace.curly.ms"
                                }
                            },
                            "end": "(?=})",
                            "patterns": [
                                {
                                    "begin": "(?<!\\.)\\b(case|default)\\b",
                                    "beginCaptures": {
                                        "1": {
                                            "name": "keyword.control.switch.ms"
                                        }
                                    },
                                    "end": "(?=:)",
                                    "patterns": [
                                        {
                                            "include": "#expression"
                                        }
                                    ]
                                },
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "literal-regexp": {
            "patterns": [
                {
                    "begin": "(?x) (?<=    \\.|\\(|,|{|}|\\[|;|,|<|>|<=|>=|==|!=|===|!==|\\+|-|\\*|%|\\+\\+|--|<<|>>|>>>|&|\\||\\^|!|~|&&|\\|\\||\\?|:|=|\\+=|-=|\\*=|%=|<<=|>>=|>>>=|&=|\\|=|\\^=|/|/=|    \\Wnew|\\Wdelete|\\Wvoid|\\Wtypeof|\\Winstanceof|\\Win|\\Wdo|\\Wreturn|\\Wcase|\\Wthrow|    ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^  )\\s*  (/)  (?!/|\\*|$)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.ms"
                        }
                    },
                    "end": "(/)([gimy]*)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.ms"
                        },
                        "2": {
                            "name": "keyword.other.ms"
                        }
                    },
                    "name": "string.regexp.ms",
                    "patterns": [
                        {
                            "include": "source.regexp.ms"
                        }
                    ]
                }
            ]
        },
        "function-declaration-parameters": {
            "patterns": [
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.begin.ms"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.ms"
                        }
                    },
                    "patterns": [
                        {
                            "match": "[_$a-zA-Z][$\\w]*",
                            "name": "variable.parameter.function.ms"
                        },
                        {
                            "match": ",",
                            "name": "punctuation.separator.parameter.function.ms"
                        },
                        {
                            "begin": "=",
                            "beginCaptures": {
                                "0": {
                                    "name": "keyword.operator.assignment.ms"
                                }
                            },
                            "end": "(?=[,)])",
                            "name": "meta.parameter.optional.ms",
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "literal-variable": {
            "patterns": [
                {
                    "match": "(?<!(?<!\\.\\.)\\.)\\b(arguments)\\b",
                    "name": "variable.language.arguments.ms"
                },
                {
                    "match": "[A-Z][_$\\dA-Z]*\\b",
                    "name": "variable.other.constant.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.dollar.ms"
                        }
                    },
                    "match": "(\\$)[$\\w]+",
                    "name": "variable.other.dollar.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "variable.other.class.ms"
                        },
                        "2": {
                            "name": "keyword.operator.accessor.ms"
                        },
                        "3": {
                            "name": "variable.other.property.static.ms"
                        }
                    },
                    "match": "(?x)  \\b([A-Z][$\\w]*)\\s*(\\.)  ([_$a-zA-Z][$\\w]*)",
                    "name": "meta.property.class.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "variable.other.object.ms"
                        }
                    },
                    "match": "(?<!\\.)[_$a-zA-Z][$\\w]*\\s*(?=[\\[\\.])",
                    "name": "entity.name.object.ms"
                },
                {
                    "captures": {
                        "2": {
                            "name": "variable.other.property.ms"
                        }
                    },
                    "match": "(?<=\\.)\\s*[_$a-zA-Z][$\\w]*",
                    "name": "meta.property.object.ms"
                },
                {
                    "match": "[_$a-zA-Z][$\\w]*",
                    "name": "variable.other.readwrite.ms"
                }
            ]
        },
        "string-content": {
            "patterns": [
                {
                    "match": "\\\\\\s*\\n",
                    "name": "constant.character.escape.newline.ms"
                },
                {
                    "match": "\\\\(x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|.)",
                    "name": "constant.character.escape.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "constant.character.escape.ms"
                        },
                        "2": {
                            "name": "entity.name.format.string.argument.ms"
                        },
                        "3": {
                            "name": "constant.character.escape.ms"
                        }
                    },
                    "match": "(\\$<%)([\\d])(\\$>)",
                    "name": "meta.string.format.ms"
                }
            ]
        },
        "literal-for": {
            "patterns": [
                {
                    "begin": "(?<!\\.)\\b(for)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.loop.ms"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.ms"
                        }
                    },
                    "name": "meta.for.ms",
                    "patterns": [
                        {
                            "begin": "\\(",
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.brace.round.ms"
                                }
                            },
                            "end": "(?=\\))",
                            "patterns": [
                                {
                                    "include": "#keyword-storage"
                                },
                                {
                                    "include": "#expression"
                                },
                                {
                                    "include": "#punctuation"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "language-label": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.label.entry.ms"
                        }
                    },
                    "match": "\\+{3}(\\w+)\\+{3}|\\-{3}(\\w+)\\-{3}",
                    "name": "meta.label.entry.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.label.injector.ms"
                        },
                        "2": {
                            "name": "punctuation.definition.label.inject.begin.ms"
                        },
                        "3": {
                            "name": "punctuation.definition.label.inject.begin.ms"
                        },
                        "4": {
                            "name": "punctuation.definition.label.inject.end.ms"
                        }
                    },
                    "match": "\\*{3}+(\\w+)\\*{3}[\\n\\r](\\*{3})([\\s\\S]*(?=\\*{3}))(\\*{3})",
                    "name": "meta.label.injector.ms"
                }
            ]
        },
        "literal-function-call": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.function.ms"
                        },
                        "2": {
                            "name": "meta.group.braces.round.function.arguments.ms"
                        }
                    },
                    "match": "(?x)  ([_$a-zA-Z][$\\w]*)\\s*  (\\(\\s*\\))",
                    "name": "meta.function-call.without-arguments.ms"
                },
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.function.ms"
                        }
                    },
                    "match": "(?x)  ([_$a-zA-Z][$\\w]*)\\s* (?=\\()",
                    "name": "meta.function-call.with-arguments.ms"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#support"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#literal-switch"
                },
                {
                    "include": "#literal-regexp"
                },
                {
                    "include": "#literal-template-string"
                },
                {
                    "include": "#literal-string"
                },
                {
                    "include": "#language-constant"
                },
                {
                    "include": "#keyword-language"
                },
                {
                    "include": "#keyword-storage"
                },
                {
                    "include": "#storage-types"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#brackets"
                },
                {
                    "include": "#literal-function-call"
                },
                {
                    "include": "#literal-variable"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#language-label"
                }
            ]
        }
    }
}